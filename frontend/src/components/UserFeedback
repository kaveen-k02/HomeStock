import React, { useEffect, useState } from "react";
import axios from "axios";
import { FaStar, FaStarHalfAlt, FaRegStar, FaEdit, FaTrash } from "react-icons/fa";
import { useParams, useNavigate } from "react-router-dom";

const UserFeedback = () => {
  const { userId } = useParams();
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [feedbacks, setFeedbacks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingFeedback, setEditingFeedback] = useState(null);
  const [editRating, setEditRating] = useState(5);
  const [editComment, setEditComment] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [hoverRating, setHoverRating] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [feedbackToDelete, setFeedbackToDelete] = useState(null);

  useEffect(() => {
    const fetchUserAndFeedbacks = async () => {
      setLoading(true);
      try {
        // Fetch user details
        const userResponse = await axios.get(`http://localhost:8070/api/users/${userId}`);
        setUser(userResponse.data);
        
        // Fetch user's feedbacks
        const feedbackResponse = await axios.get(`http://localhost:8070/api/feedback/user/${userId}`);
        setFeedbacks(feedbackResponse.data);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };

    if (userId) {
      fetchUserAndFeedbacks();
    }
  }, [userId]);

  const renderStars = (rating) => {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;

    return (
      <div className="flex items-center gap-1">
        {[...Array(fullStars)].map((_, i) => (
          <FaStar 
            key={i} 
            className="text-yellow-400 w-5 h-5 transform transition-transform duration-200 hover:scale-110" 
          />
        ))}
        {hasHalfStar && (
          <FaStarHalfAlt 
            className="text-yellow-400 w-5 h-5 transform transition-transform duration-200 hover:scale-110" 
          />
        )}
        {[...Array(5 - fullStars - (hasHalfStar ? 1 : 0))].map((_, i) => (
          <FaRegStar 
            key={i} 
            className="text-yellow-400 w-5 h-5 transform transition-transform duration-200 hover:scale-110" 
          />
        ))}
        <span className="ml-2 text-gray-600 text-sm font-medium bg-gray-100 px-2 py-0.5 rounded-full">
          {rating.toFixed(1)}
        </span>
      </div>
    );
  };

  const handleEdit = (feedback) => {
    setEditingFeedback(feedback);
    setEditRating(feedback.rating);
    setEditComment(feedback.comment || "");
    setShowModal(true);
  };

  const handleUpdate = async () => {
    try {
      await axios.put(`http://localhost:8070/api/feedback/${editingFeedback._id}`, {
        rating: editRating,
        comment: editComment
      });
      setShowModal(false);
      
      // Update the feedback locally
      setFeedbacks(feedbacks.map(f => 
        f._id === editingFeedback._id 
          ? {...f, rating: editRating, comment: editComment} 
          : f
      ));
      
      alert("Feedback updated successfully");
    } catch (error) {
      console.error("Error updating feedback:", error);
      alert("Failed to update feedback");
    }
  };

  const handleDeleteClick = (feedback) => {
    setFeedbackToDelete(feedback);
    setShowDeleteModal(true);
  };

  const confirmDelete = async () => {
    if (!feedbackToDelete) return;

    try {
      await axios.delete(`http://localhost:8070/api/feedback/${feedbackToDelete._id}`);
      setFeedbacks(feedbacks.filter(f => f._id !== feedbackToDelete._id));
      setShowDeleteModal(false);
      setFeedbackToDelete(null);
      alert("Feedback deleted successfully");
    } catch (error) {
      console.error("Error deleting feedback:", error);
      alert("Failed to delete feedback");
    }
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto p-6 bg-primary min-h-screen flex items-center justify-center">
        <div className="text-xl text-background">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-primary min-h-screen w-full flex flex-col font-sans px-4 md:px-6 lg:px-10">
      {/* Header Section */}
      <div className="w-full text-center mt-8 mb-6">
        <h2 className="text-5xl font-extrabold leading-tight text-background mb-4">
          {user ? `${user.firstName}'s Feedback` : 'My Feedback'}
        </h2>
        <p className="text-xl text-background mb-6">View and manage your product feedback history</p>
        
        {/* Navigation Buttons */}
        <div className="flex justify-center gap-4 mb-8">
          <button
            onClick={() => navigate('/feedback/new')}
            className="bg-accent text-white font-bold px-6 py-3 rounded-full hover:bg-background transition shadow-lg text-lg"
          >
            Add New Feedback
          </button>
          <button
            onClick={() => navigate('/feedback')}
            className="bg-white text-accent font-bold border-4 border-accent px-6 py-3 rounded-full hover:bg-background hover:text-white transition shadow-lg text-lg"
          >
            All Feedbacks
          </button>
        </div>
      </div>

      {/* User Profile Card */}
      {user && (
        <div className="bg-white shadow-lg rounded-lg p-6 mb-8 border-4 border-accent max-w-4xl mx-auto w-full">
          <div className="flex items-center justify-center">
            <div className="w-20 h-20 rounded-full bg-accent flex items-center justify-center text-white text-3xl font-bold">
              {user.firstName?.charAt(0)}
            </div>
            <div className="ml-4">
              <h2 className="text-xl font-semibold text-background">{user.firstName} {user.lastName}</h2>
              <p className="text-gray-600">{user.email}</p>
              <p className="text-sm text-gray-500">Member since {new Date(user.createdAt).toLocaleDateString()}</p>
            </div>
          </div>
        </div>
      )}

      {/* Feedback List */}
      <div className="grid gap-6 max-w-4xl mx-auto w-full">
        {feedbacks.map((feedback) => (
          <div
            key={feedback._id}
            className="bg-white shadow-lg rounded-lg overflow-hidden border-4 border-accent hover:shadow-xl transition-all duration-300"
          >
            <div className="p-5 flex items-start">
              {/* Product Avatar */}
              <div className="w-14 h-14 rounded-full flex items-center justify-center text-white font-bold text-xl bg-accent shadow-sm">
                {feedback.productName.charAt(0).toUpperCase()}
              </div>

              {/* Feedback Content */}
              <div className="ml-4 flex-grow">
                <h3 className="text-xl font-semibold text-background">{feedback.productName}</h3>
                <div className="flex items-center mt-2">
                  {renderStars(feedback.rating)}
                  <span className="ml-2 text-gray-600 text-sm font-medium">{feedback.rating}/5</span>
                </div>
                <p className="text-gray-700 mt-3 text-base">{feedback.comment || "No comments provided."}</p>
                
                {/* Timestamp */}
                <div className="text-xs text-gray-500 mt-2">
                  {new Date(feedback.createdAt).toLocaleDateString()}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-3">
                <button 
                  onClick={() => handleEdit(feedback)} 
                  className="text-accent hover:text-white bg-primary hover:bg-accent p-2 rounded-full transition-colors"
                  title="Edit feedback"
                >
                  <FaEdit size={18} />
                </button>
                <button 
                  onClick={() => handleDeleteClick(feedback)} 
                  className="text-red-500 hover:text-white bg-primary hover:bg-red-500 p-2 rounded-full transition-colors"
                  title="Delete feedback"
                >
                  <FaTrash size={18} />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {feedbacks.length === 0 && (
        <div className="text-center py-10 bg-white rounded-lg shadow-lg border-4 border-accent max-w-4xl mx-auto w-full">
          <p className="text-background text-xl mb-4">You haven't submitted any feedback yet.</p>
          <button
            onClick={() => navigate('/feedback/new')}
            className="bg-accent text-white font-bold px-6 py-3 rounded-full hover:bg-background transition shadow-lg text-lg"
          >
            Submit Your First Feedback
          </button>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
          <div className="bg-white p-6 rounded-lg w-full max-w-md shadow-xl border border-accent">
            <h2 className="text-2xl font-semibold text-background mb-4 text-center">
              Delete Feedback
            </h2>
            <p className="text-gray-700 mb-6 text-center">
              Are you sure you want to delete this feedback? This action cannot be undone.
            </p>
            
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => {
                  setShowDeleteModal(false);
                  setFeedbackToDelete(null);
                }}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
          <div className="bg-primary p-6 rounded-lg w-full max-w-md shadow-xl border-4 border-accent">
            <h2 className="text-2xl font-semibold text-background mb-5 text-center">
              Edit Feedback
            </h2>
            
            <div className="mb-4">
              <label className="block text-background font-medium mb-1">Product</label>
              <input
                type="text"
                value={editingFeedback.productName}
                disabled
                className="border rounded-lg p-2 w-full bg-gray-100"
              />
            </div>

            <div className="mb-4">
              <label className="block text-background font-medium mb-2">Rating</label>
              <div className="flex items-center gap-1 mb-2">
                {[...Array(5)].map((_, index) => {
                  const starValue = index + 1;
                  return (
                    <FaStar
                      key={index}
                      size={28}
                      className={`cursor-pointer transition-all duration-200 transform hover:scale-110 ${
                        starValue <= (hoverRating || editRating)
                          ? "text-yellow-400"
                          : "text-gray-300"
                      }`}
                      onClick={() => setEditRating(starValue)}
                      onMouseEnter={() => setHoverRating(starValue)}
                      onMouseLeave={() => setHoverRating(null)}
                    />
                  );
                })}
                <span className="ml-2 text-sm text-gray-600 bg-gray-100 px-2 py-0.5 rounded-full">
                  {editRating.toFixed(1)}
                </span>
              </div>
            </div>

            <div className="mb-4">
              <label className="block text-background font-medium mb-1">Comment</label>
              <textarea
                value={editComment}
                onChange={(e) => setEditComment(e.target.value)}
                className="border rounded-lg p-2 w-full bg-white mb-4 focus:ring-2 focus:ring-accent focus:outline-none"
                rows={4}
              />
            </div>

            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setShowModal(false)}
                className="bg-gray-300 hover:bg-gray-400 text-gray-800 py-2 px-4 rounded-lg transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleUpdate}
                className="bg-background text-white py-2 px-4 rounded-lg hover:bg-accent transition-all"
              >
                Update
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserFeedback;
